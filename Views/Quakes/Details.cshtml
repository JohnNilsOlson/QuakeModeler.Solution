@*@using QuakeModeler.Models;
@model List<Quake>*@

<h1>Earthquake:</h1>

<ol>
@foreach (Quake quake in Model)
{
  <li>Magnitude: @quake.Magnitude</li>
  <li>Lat: @quake.QuakeLat</li>
  <li>Lng: @quake.QuakeLng</li>
}
</ol>

@*
<div id="map"></div>
    <script type="text/javascript">
    let quakes = [];
    @foreach (var item in Model.quake)
    {
        quakes.push()
    }
    var quakes = @Html.Raw(Json.Serialize(@Model));
      
      //stand in for view model
      const quakeMap = {
        quake1: {
          center: { lat: 45.8787, lng: -121.6545 },
          magnitude: 3,
          time: 1598373123010
        },
        quake2: {
          center: { lat: 44.7145, lng: -117.3214 },
          magnitude: 5,
          time: 1598371790600
        },
        quake3: {
          center: { lat: 44.6543, lng: -118.243 },
          magnitude: 6,
          time: 1598371471950
        },
        quake4: {
          center: { lat: 46.7644, lng: -120.4351 },
          magnitude: 4,
          time: 1598371049800
        },
        quake5: {
          center: { lat: 46.7644, lng: -121.6751 },
          magnitude: 3,
          time: 1598370823720
        },
        quake6: {
          center: { lat: 45.8787, lng: -120.1545 },
          magnitude: 3,
          time: 1598370246570
        },
        quake7: {
          center: { lat: 44.7145, lng: -117.9874 },
          magnitude: 5,
          time: 1598369251910
        },
        quake8: {
          center: { lat: 44.6543, lng: -119.243 },
          magnitude: 6,
          time: 1598367671670
        },
        quake9: {
          center: { lat: 46.7644, lng: -121.551 },
          magnitude: 4,
          time: 1598367473120
        },
        quake10: {
          center: { lat: 46.9644, lng: -121.6751 },
          magnitude: 3,
          time: 1598367409110
        }
      };

      //holds currently opened info popups
      var openInfo = [];

      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          //stand in for user inputted place to center map
          center: { lat: 45.5051, lng: -122.6750},
          zoom: 8,
          //custom style
          styles: [{"featureType":"administrative","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"administrative.country","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"administrative.province","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#e3e3e3"}]},{"featureType":"landscape.natural","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"color":"#cccccc"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#FFFFFF"}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"off"}]}]
        });

        //creates marker for user inputted location (necessary?)
        var marker = new google.maps.Marker({  
            position: { lat: 45.5051, lng: -122.6750}  
          });
        
        //sets marker for user inputted location
        marker.setMap(map);

        for (const quake in Model) {

          const quakeMarker = new google.maps.Marker({
              //Creates little circle marker at epicenter
              position: { Model[quake].lat, Model[quake].lng },
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 3,
                strokeWeight: 1,
                strokeColor: '#FF0000',
                fillColor: '#FF0000',
                fillOpacity: 1
              },
          });

          //sets the body of the info window
          var quakeInfo = `<h3>Earthquake Event</h3>
            <hr />
            <h4>Coordinates: ${Model[quake].center.lat}, ${Model[quake].center.lng}</h4>
            <h4>Date: ${new Date(Model[quake].time)}</h4>
            <h4>Magnitude: ${Model[quake].magnitude}</h4>`

          //creates the info window
          const infowindow = new google.maps.InfoWindow({
              content: quakeInfo,
          });

          //makes markers clickable, closes open info window, opens info window, stores currently open window in openInfo array
          quakeMarker.addListener("click", () => {
              closeOtherInfo();
              infowindow.open(map, quakeMarker);
              openInfo[0] = infowindow;
          });

          //sets marker on the map
          quakeMarker.setMap(map);

          //generates magnitude circle
          const quakeCircle = new google.maps.Circle({
            strokeColor: "#FF0000",
            strokeOpacity: 0,
            strokeWeight: 0,
            fillColor: "#FF0000",
            fillOpacity: 0.35,
            map,
            center: Model[quake].center,
            radius: Model[quake].magnitude * 10000
          });
        }

        //closes open info window
        function closeOtherInfo() {
          if (openInfo.length > 0) {
            openInfo[0].set("marker", null);
            openInfo[0].close();
            openInfo.length = 0;
          }
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB0f5hDkfvYLD979JoHFNDIAUyqrU0fk3A&callback=initMap"defer></script>
</div>
*@