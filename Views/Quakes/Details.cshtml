@{
  Layout = "_Layout";
}

@using QuakeModeler.Models;
@model List<Quake>

<div class="hero-image"><img src="wwwroot/assets/images/EQ2.png"><h1>Can you Feel it?</h1></div>
<div class="hero-text">
  <h4>"The earth moves under your feet.</h4>
  <h4>We will tell you when."</h4>
</div>

<style>
  #map {
    height: 800px;
    width: 100%;
  }
</style>

<p><strong>Location</strong>: @ViewBag.UserData.PlaceName</p>
<p><strong>Date</strong>:<span id ="date"></span></p>
<script>document.getElementById("date").innerHTML = Date();</script>
<p><strong>Search Radius</strong>: 50km</p>
<p><strong>Daily Earthquake Probability</strong>: @ViewBag.Possibility%</p>
<p><strong>Average Magnitude</strong>: @ViewBag.AverageMagnitude m</p>
<p><strong>Earthquake Count</strong>: @ViewBag.QuakeCount</p>
<p><strong>Largest Earthquake</strong>: @ViewBag.MaxMag m</p>

<div id="map">
    <script>      
      var quakeMap = @Html.Raw(Json.Serialize(Model));
      var userPlace = @Html.Raw(Json.Serialize(ViewBag.UserData));

      //holds currently opened info popups
      var openInfo = [];

      function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          //stand in for user inputted place to center map
          center: { lat: parseFloat(userPlace.userLat), lng: parseFloat(userPlace.userLng) },
          zoom: 10,
          //custom style
          styles: [{"featureType":"administrative","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"administrative.country","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"administrative.province","elementType":"geometry.stroke","stylers":[{"visibility":"off"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#e3e3e3"}]},{"featureType":"landscape.natural","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"color":"#cccccc"}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.line","elementType":"labels.text","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"geometry","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.airport","elementType":"labels","stylers":[{"visibility":"off"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#FFFFFF"}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"off"}]}]
        });

        //creates marker for user inputted location (necessary?)
        var marker = new google.maps.Marker({  
            position: { lat: parseFloat(userPlace.userLat), lng: parseFloat(userPlace.userLng) }  
          });
        
        //sets marker for user inputted location
        marker.setMap(map);

        quakeMap.forEach(function(quake) {

          const quakeMarker = new google.maps.Marker({
              //Creates little circle marker at epicenter
              position: { lat: parseFloat(quake.quakeLat), lng: parseFloat(quake.quakeLng) },
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 3,
                strokeWeight: 1,
                strokeColor: '#FFFFFF',
                fillColor: '#FFFFFF',
                fillOpacity: 1
              },
          });

          //sets the body of the info window
          var quakeInfo = `<p>Earthquake Event</p>
            <p>${new Date(parseInt(quake.date))}</p>
            <p>${quake.place}</p>
            <hr />
            <p>Coordinates: ${quake.quakeLat}, ${quake.quakeLng}</p>
            <p>Magnitude: ${quake.magnitude}</p>`
            

          //creates the info window
          const infowindow = new google.maps.InfoWindow({
              content: quakeInfo,
          });

          //makes markers clickable, closes open info window, opens info window, stores currently open window in openInfo array
          quakeMarker.addListener("click", () => {
              closeOtherInfo();
              infowindow.open(map, quakeMarker);
              openInfo[0] = infowindow;
          });

          //sets marker on the map
          quakeMarker.setMap(map);

          //generates magnitude circle
          const quakeCircle = new google.maps.Circle({
            strokeColor: "#FF0000",
            strokeOpacity: 0,
            strokeWeight: 0,
            fillColor: "#FF0000",
            fillOpacity: 0.35,
            map,
            center: { lat: parseFloat(quake.quakeLat), lng: parseFloat(quake.quakeLng) },
            radius: (Math.exp(quake.magnitude/1.01-0.13))*100
          });
        });

        //closes open info window
        function closeOtherInfo() {
          if (openInfo.length > 0) {
            openInfo[0].set("marker", null);
            openInfo[0].close();
            openInfo.length = 0;
          }
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=&callback=initMap"defer></script>
  </div>


